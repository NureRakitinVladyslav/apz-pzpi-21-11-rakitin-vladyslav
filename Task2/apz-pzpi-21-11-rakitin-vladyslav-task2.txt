1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Розроблювана програмна система має клієнт-серверну архітектуру, та складається з 4 компонентів: серверної – backend-частини, та 3 клієнтських –  iot-застосунок, веб-клієнт та мобільний додаток.
На стратегічному рівні взаємодія клієнтських та серверної частини відбувається наступним чином:
1) IoT частина та сервер
–	застосунок IoT зчитує показники положення тіла та температури військовослужбовців, математично їх оброблює та визначає стан військового;
–	ці дані передаються на сервер за допомогою захищеної передачі даних;
–	сервер обробляє ці дані, використовуючи алгоритми обробки користувацьких даних для визначення стану сну військовослужбовців та вжиття необхідних заходів.
2) Веб-частина та сервер
–	адміністратори веб-частини мають доступ до інструментів адміністрування для керування користувачами та налаштування системи;
–	сервер забезпечує інтерфейс для адміністраторів для управління базою даних та роботи з даними адміністраторів.
3) Мобільний додаток та сервер
–	військовослужбовець в мобільному додатку переглядає свій особистий профіль та дані про сон;
–	за допомогою мобільного додатку військовослужбовець може надсилати запити на ротацію;
–	сервер обробляє ці запити та надсилає сповіщення про них на мобільний додаток.
На технічному рівні взаємодія описується так:
1) IoT частина та сервер
–	застосунок IoT зчитує дані про положення тіла та температуру військовослужбовців;
–	ці дані передаються на сервер через HTTP POST запити з використанням захищеної передачі даних, наприклад, зашифрованого з'єднання HTTPS;
–	сервер приймає ці дані та обробляє їх, використовуючи власні алгоритми обробки користувацьких даних, щоб визначити стан сну військовослужбовців. Результати цієї обробки відправляються назад на IoT пристрій для відображення результату.
2) Веб-частина та сервер
–	адміністратори веб-частини взаємодіють з сервером через HTTP запити, наприклад, HTTP GET, POST, PUT або DELETE;
–	наприклад, коли адміністратор виконує пошук користувачів або редагує дані користувача, веб-інтерфейс відправляє відповідні HTTP запити на сервер;
–	сервер обробляє ці запити, виконує відповідні дії (наприклад, пошук або редагування даних) та повертає результати назад на веб-сторінку або веб-додаток через HTTP відповіді.
3) Мобільний додаток та сервер
–	коли військовослужбовець користується мобільним додатком, цей додаток взаємодіє з сервером через HTTP запити;
–	наприклад, при перегляді особистого профілю військовослужбовця, мобільний додаток відправляє запит на сервер за допомогою HTTP GET запиту, щоб отримати дані про сон;
–	сервер обробляє ці запити, виконує відповідні дії (наприклад, оновлення даних про ротацію) та відправляє сповіщення про результати операцій назад на мобільний додаток через HTTP відповіді або через пуш-сповіщення.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Побудуємо діаграму розгортання за наведеною структурою:
1) Серверний вузол
–	Вузол: Фізичний сервер, на якому розгортана серверна частина програмної системи;
–	Артефакти: Серверний застосунок, розроблений з використанням ASP.NET Web API на базі фреймворку ASP.NET Core.;
–	Властивості: Операційна система Windows Server, середовище виконання .NET Core.
2) IoT вузол
–	Вузол: Фізичний пристрій, який відповідає за збір даних про положення тіла та температуру військовослужбовців;
–	Артефакти: Програмне забезпечення для IoT пристрою, розроблене мовою програмування C та запрограмоване на платформі ESP32;
–	Властивості: Операційна система для вбудованих пристроїв, середовище виконання мови програмування C.
3) Веб-вузол
–	Веб-сервер, на якому розгортано веб-інтерфейс системи;
–	Артефакти: Веб-додаток, розроблений з використанням фреймворку ASP.NET Core та мов програмування HTML, CSS, JavaScript;
–	Властивості: Операційна система Windows Server, середовище виконання .NET Core.
4) Мобільний вузол
–	Вузол: Смартфон або планшет, на якому встановлено мобільний додаток для військовослужбовців;
–	Артефакти: Мобільний додаток, розроблений за допомогою Android Studio та мови програмування Java;
–	Властивості: Операційна система Android.
5) Вузол бази даних
–	Вузол: Сервер баз даних, на якому розміщена база даних SQL Server;
–	Артефакти: База даних SQL Server;
–	Властивості: Управління базою даних здійснюється за допомогою SQL Server Management Studio (SSMS).
Поєднаємо компоненти між собою наступним чином:
1) Серверний вузол та IoT вузол
–	з’єднання між цими вузлами представлене лінією, яка показує обмін даними;
–	лінія має стрілку або мітку, що вказує на напрям передачі даних від IoT вузла до серверного вузла.
2) Серверний вузол та веб-вузол:
–	на діаграмі зображено з'єднання між цими вузлами, що показує взаємодію через HTTP-запити;
–	з’єднання має мітку, що вказує на тип запитів (GET, POST, PUT, DELETE) та відповідей, які передаються між вузлами.
3) Серверний вузол та мобільний вузол
–	на діаграмі показане з'єднання між цими вузлами лінією або стрілкою;
–	з'єднання має мітку, що вказує на передачу HTTP-запитів та відповідей між серверним та мобільним вузлами.
4) Серверний вузол та вузол бази даних
–	на діаграмі взаємодія позначається лінією, що з'єднує обидва вузли;
–	з’єднання має мітку, що вказує на тип SQL-запиту на виконання операцій бази даних, таких як створення, оновлення та видалення записів.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Серверна частина програмної системи представляє з себе ASP.NET Web API, що базується на фреймворку ASP.NET Core та використовує технологію REST API. Для роботи з базою використовується Entity Framework, а мовою програмування для реалізації бізнес-логіки та взаємодії з базою даних є C#.
Серверна частина складається з наступних компонентів: 
1) Хост-процес: Це процес, який запускає веб-застосунок. Він обробляє HTTP-запити від клієнтів і направляє їх відповідним компонентам.
2) Середовище виконання ASP.NET: Це середовище, яке забезпечує інфраструктуру для виконання веб-застосунку. Він включає такі компоненти, як системи управління кешем, маршрутизації обробки запитів.
3) Моделі: Це класи, які представляють дані, які обробляє API. Моделі використовуються для зв'язування даних з запитами та відповідями API.
4) Контролери: Це класи, які обробляють HTTP-запити. Кожен контролер відповідає за певний набір кінцевих точок API.
5) Методи дії: Це методи в контролерах, які виконують фактичну роботу API. Кожен метод дії відповідає за певну операцію API, наприклад, отримання ресурсу, створення ресурсу, оновлення або видалення ресурсу.
Описані компоненти взаємодіють між собою наступним чином:
1) Коли клієнт надсилає HTTP-запит до веб-застосунку, хост-процес отримує запит і передає його середовищу виконання ASP.NET.
2) Середовище виконання ASP.NET використовує систему маршрутизації, щоб зіставити запит із відповідним контролером і методом дії.
3) Контролер викликає відповідний метод дії.
4) Метод дії використовує необхідні моделі для доступу до даних.
5) Метод дії створює відповідь API, яка включає дані у вказаному форматі даних.
6) Середовище виконання ASP.NET надсилає відповідь API клієнту.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Розроблювана програмна система призначена для 3 категорій користувачів (акторів):
1) Військовослужбовець
2) Командир
3) Адміністратор
Кожен з яких має наступні варіанти використання (прецеденти):
1) Військовослужбовець:
–	авторизація військовослужбовця
–	перегляд історії сну (extends авторизація військовослужбовця)
–	перегляд особистого профілю (extends перегляд історії сну)
–	зміна пароля військовослужбовця (extends перегляд особистого профілю)
–	оцінка сну (included перегляд історії сну)
–	перегляд історії ротацій (extends перегляд історії сну)
–	запит на ротацію (extends історія ротацій)
–	налаштування додатку (extends перегляд історії сну)
–	персоналізація мови (included налаштування додатку)
–	вибір формату часу (included налаштування додатку)
–	зміна порядку дній у календарі (included налаштування додатку)
2) Командир:
–	авторизація командира
–	перегляд особистого профілю (extends авторизація командира)
–	зміна пароля командира (extends перегляд особистого профілю)
–	перегляд списку підлеглих (extends авторизація командира)
–	управління підлеглими (included перегляд списку підлеглих)
–	встановлення звання підлеглого (included управління підлеглими)
–	перегляд історії сну підлегого (included управління підлеглими)
–	перегляд історії ротацій підлеглого (included управління підлеглими)
–	перегляд запитів на ротацію підлеглого (extends перегляд історії ротацій підлеглого)
–	ротація підлеглого (extends перегляд історії ротацій підлеглого)
3) Адміністратор:
–	авторизація адміністратора
–	управління підрозділами (extends авторизація адміністратора)
–	перегляд списку підрозділів (included управління підрозділами)
–	додавання підрозділів (included управління підрозділами)
–	редагування підрозділів (included управління підрозділами)
–	видалення підрозділів (included управління підрозділами)
–	управління командирами та військовими (included перегляд списку підрозділів)
–	перегляд списку командирів та військових (included управління командирами та військовими)
–	додавання командирів та військових (included управління командирами та військовими)
–	редагування командирів та військових (included управління командирами та військовими)
–	видалення командирів та військових (included управління командирами та військовими)
–	резервне копіювання даних
–	відновлення даних (extends Резервне копіювання даних)
–	маніпулювання даними
–	імпорт даних (included маніпулювання даними)
–	експорт даних (included маніпулювання даними)
За переліченими прецедентами можемо побудувати діаграму прецедентів для 3 акторів.

5 ПОБУДОВА ER-ДІАГРАМИ

Враховуючи специфіку предметної області, можемо в ній виділити наступні 6 сутностей: підрозділ, командир, військовий, сон, ротація, запит на ротацію, що мають такі властовості:
–	Підрозділ: номер, тип, назва, розташування, прапор;
–	Командир: ім’я користувача, пароль користувача, повне ім’я, дата народження, звання, фотографія;
–	Військовий: ім’я користувача, пароль користувача, повне ім’я, дата народження, звання, фотографія, дата зарахування на службу, дата звільнення зі служби;
–	Сон: час початку, час завершення, якість;
–	Ротація: дата від’їзду, дата повернення, коментарій;
–	Запит на ротацію: час створення, причина, текст.
Наведені сутності взаємодіють між собою наступним чином: підрозділ управляється одним або декількома командирами, кожен командир має деяку кількість підлеглих військових, кожен військовий має певне число записів сну, може бути ротований багато разів та відправляти необмежене число запитів на ротацію.
Користуючись вище наведеною інформацією, побудуємо ER-діаграму бази даних, що складатиметься з 6 таблиць:
1) Підрозділ (Unit):
–	Id: Цілочисельний первинний ключ, що ідентифікує підрозділ;
–	Number: Цілочисельний номер підрозділу;
–	Type: Текстовий рядок, що описує тип підрозділу;
–	Name: Текстовий рядок з назвою підрозділу;
–	Location: Текстовий рядок з розташуванням підрозділу;
–	Flag: Текстовий рядок з прапором підрозділу.
2) Командир (Commander):
–	Id: Цілочисельний первинний ключ, що ідентифікує командира;
–	UserName: Текстовий рядок з ім'ям користувача командира;
–	UserPassword: Текстовий рядок з паролем командира;
–	FullName: Текстовий рядок з повним ім'ям командира;
–	DateOfBirth: Дата народження командира;
–	Rank: Текстовий рядок зі званням командира;
–	PhotoURL: Необов'язковий текстовий рядок з URL-адресою фотографії командира.
–	UnitId: Цілочисельний зовнішній ключ, що ідентифікує підрозділ;
3) Солдат (Soldier):
–	Id: Цілочисельний первинний ключ, що ідентифікує солдата;
–	UserName: Текстовий рядок з ім'ям користувача солдата;
–	UserPassword: Текстовий рядок з паролем солдата;
–	FullName: Текстовий рядок з повним ім'ям солдата;
–	DateOfBirth: Дата народження солдата;
–	Rank: Текстовий рядок зі званням солдата;
–	PhotoURL: Необов'язковий текстовий рядок з URL-адресою фотографії солдата;
–	EnlistDate: Дата зарахування солдата на службу;
–	DischargeDate: Необов'язкова дата звільнення солдата зі служби.
–	CommanderId: Цілочисельний зовнішній ключ, що ідентифікує командира;
4) Сон (Sleep):
–	Id: Цілочисельний первинний ключ, що ідентифікує запис про сон;
–	StartTime: Час початку сну;
–	EndTime: Час завершення сну;
–	Quality: Необов'язковий цілочисельний рядок з оцінкою якості сну.
–	SoldierId: Цілочисельний зовнішній ключ, ідентифікує підрозділ;
5) Ротація (Rotation):
–	Id: Цілочисельний первинний ключ, що ідентифікує запис про ротацію;
–	LeaveDate: Дата від'їзду солдата;
–	ReturnDate: Дата повернення солдата;
–	Comment: Необов'язковий текстовий рядок з коментарем до ротації;
–	SoldierId: Цілочисельний зовнішній ключ, ідентифікує підрозділ;
6) Запит на ротацію (Request):
–	Id: Цілочисельний первинний ключ, що ідентифікує запит;
–	Time: Час створення запиту;
–	Reason: Текстовий рядок з причиною запиту;
–	Text: Необов'язковий текстовий рядок з текстом запиту
–	SoldierId: Цілочисельний зовнішній ключ, ідентифікує підрозділ;
Промоделюємо зв’язки між таблицями:
Оскільки один підрозділ може мати багато командирів, а один командир належить до одного підрозділу, між таблицями підрозділ (Unit) та командир (Commander) утворюється зв’язок один-до-багатьох.
Оскільки один командир може командувати багатьма військовими, а один військовий належить до одного командира, між таблицями командир (Commander) та військовий (Soldier) утворюється зв’язок один-до-багатьох.
Оскільки один військовий може мати багато записів про сон, а один запис про сон пов'язаний з одним військовим, між таблицями військовий (Soldier) та сон (Sleep) утворюється зв’язок один-до-багатьох.
Оскільки один військовий може мати багато ротацій, а одна ротація пов'язана з одним військовим, між таблицями військовий (Soldier) та ротація (Rotation) утворюється зв’язок один-до-багатьох.
Оскільки один військовий може мати багато запитів на ротацію, а один запит пов'язаний з одним військовим, між таблицями військовий (Soldier) та запит на ротацію (Request) утворюється зв’язок один-до-багатьох.

6 СПЕЦИФІКАЦІЯ REST

Першим кроком у проектуванні REST-специфікації є визначення контролерів. Контролери відповідають за обробку запитів, що надходять від користувачів. Нам необхідно розробити контролери для кожної категорії користувачів: Admin, Commander та Soldier.
Після визначення контролерів, необхідно визначити підтримувані HTTP-методи для кожного з них. Це включає методи GET, POST, PUT, та DELETE. Кожен метод використовується для певних операцій з ресурсами, наприклад, отримання, створення, оновлення чи видалення.
URL-шаблони визначають структуру адрес, за якими будуть доступні ресурси через API. Вони повинні бути логічними та інтуїтивно зрозумілими для користувачів.
Можливі статус-коди HTTP визначають результат виконання запиту та спрощують взаємодію між клієнтом і сервером. Статус-коди можуть вказувати на успіх запиту (наприклад, 200 OK), створення нового ресурсу (201 Created), некоректний запит (400 Bad Request), відсутність авторизації (401 Unauthorized), відсутність ресурсу (404 Not Found) або конфлікт при виконанні запиту (409 Conflict).
Параметри запиту визначають дані, які передаються у запиті на сервер. Вони можуть бути обов'язковими або необов'язковими та містити інформацію, необхідну для виконання операції, таку як дані форми, фільтри чи параметри сортування.
Параметри відповіді вказують на результат виконання запиту і повертаються у відповідь на запит. Це може бути інформація про стан виконання запиту, результат операції або корисна інформація, необхідна для подальшої роботи з даними.
Повна REST-специфікація до програмної системи у вигляді таблиці наведена у Додатку А.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Серверна частина програмної системи складається з двох шарів: рівня даних та рівня логіки.
На першому рівні даних знаходиться база даних SQL Server:
–	була створена на основі моделей та анотацій DataAnnotations;
–	містить таблиці, які зберігають дані додатку.
На другому рівні логіки знаходиться ASP.NET Core Web API, що містить моделі, контекст та контролери до бази даних:
1) Моделі: 
–	класи, що представляють сутності бази даних;
–	містять властивості, які відображають стовпці таблиць у БД;
–	мають анотації DataAnnotations, які пов'язують їх з таблицями БД;
–	не мають логіки доступу до даних.
2) Контекст: 
–	клас, що представляє контекст бази даних;
–	використовується для доступу до даних БД та їх маніпулювання;
–	містить методи для виконання CRUD-операцій (створення, читання, оновлення та видалення);
–	Автоматично генерується на основі моделей.
3) Контролери: 
–	класи, що оброблює HTTP-запити до API;
–	використовують DbContext для доступу до даних та їх обробки.
–	повертають дані у форматі JSON.
Описані компоненти взаємодіють наступним чином:
–	Моделі пов'язані з таблицями БД за допомогою анотацій DataAnnotations;
–	DbContext використовує моделі для доступу до даних у таблицях БД;
–	Контролер використовуює DbContext для отримання даних з БД та їх обробки.
За переліченими компонентами та зв’язками між ними можемо побудувати діаграму компонентів.

ВИСНОВКИ

Під час виконання лабораторної роботи була розроблена серверна частина для програмної системи проведення тренувань та оцінки їх результативності.

ДОДАТОК А
Специфікація REST

Controller	HTTP Метод	URL	Статус-код	Параметри запиту	Параметри відповіді	Опис
Admin	GET	/api/admin/units/get_all	200	-	Список усіх підрозділів (Unit)	Отримати список усіх підрозділів
Admin	GET	/api/admin/units/get_by_id	200, 404	id	Підрозділ за вказаним id або помилка 404, якщо не знайдено	Отримати підрозділ за id
Admin	POST	/api/admin/units/add	201, 409	number, type, name, location, flag	Новий підрозділ або помилка 409, якщо конфлікт	Додати новий підрозділ
Admin	PUT	/api/admin/units/edit	204, 404, 409	id, number, type, name, location, flag	Помилка 404, якщо не знайдено, або 409, якщо конфлікт	Оновити існуючий підрозділ за id
Admin	DELETE	/api/admin/units/delete	204, 404	id	Видалити підрозділ або помилка 404, якщо не знайдено	Видалити підрозділ за id
Admin	GET	/api/admin/commanders/get_all	200	-	Список усіх командирів (Commander)	Отримати список усіх командирів
Admin	GET	/api/admin/commanders/get_by_id	200, 404	id	Командир за вказаним id або помилка 404, якщо не знайдено	Отримати командира за id
Admin	POST	/api/admin/commanders/add	201, 409	userName, userPassword, fullName, dateOfBirth, rank, photoURL, unitId	Новий командир або помилка 409, якщо конфлікт	Додати нового командира
Admin	PUT	/api/admin/commanders/edit	204, 404, 409	id, userName, userPassword, fullName, dateOfBirth, rank, photoURL, unitId	Помилка 404, якщо не знайдено, або 409, якщо конфлікт	Оновити існуючого командира за id
Admin	DELETE	/api/admin/commanders/delete	204, 404	id	Видалити командира або помилка 404, якщо не знайдено	Видалити командира за id
Admin	GET	/api/admin/soldiers/get_all	200	-	Список усіх солдатів (Soldier)	Отримати список усіх солдатів
Admin	GET	/api/admin/soldiers/get_by_id	200, 404	id	Солдат за вказаним id або помилка 404, якщо не знайдено	Отримати солдата за id
Admin	POST	/api/admin/soldiers/add	201, 409	userName, userPassword, fullName, dateOfBirth, rank, photoURL, enlistDate, dischargeDate, commanderId	Новий солдат або помилка 409, якщо конфлікт	Додати нового солдата
Admin	PUT	/api/admin/soldiers/edit	204, 404, 409	id, userName, userPassword, fullName, dateOfBirth, rank, photoURL, enlistDate, dischargeDate, commanderId	Помилка 404, якщо не знайдено, або 409, якщо конфлікт	Оновити існуючого солдата за id
Admin	DELETE	/api/admin/soldiers/delete	204, 404	id	Видалити солдата або помилка 404, якщо не знайдено	Видалити солдата за id
Commander	GET	/api/commander/login	200, 404, 401	userName, userPassword	Авторизація командира або помилка 404 або 401	Авторизація командира
Commander	PUT	/api/commander/change_password	204, 400	id, userPassword	Зміна паролю командира або помилка 400, якщо не знайдено	Зміна паролю командира
Commander	GET	/api/commander/get_profile	200, 400	id	Профіль командира або помилка 400, якщо не знайдено	Отримати профіль командира
Commander	GET	/api/commander/soldiers/get_all_by_commander_id	200, 400	commanderId	Список усіх солдатів командира або помилка 400, якщо не знайдено	Отримати список усіх солдатів командира
Commander	PUT	/api/commander/soldiers/edit	204, 400	id, rank	Оновити ранг солдата або помилка 400, якщо не знайдено	Оновити ранг солдата
Commander	GET	/api/commander/sleeps/get_last_by_soldier_id	200, 400	soldierId	Останній сон солдата або помилка 400, якщо не знайдено	Отримати останній сон солдата
Commander	GET	/api/commander/requests/get_last_by_soldier_id	200, 400	soldierId	Останній запит солдата або помилка 400, якщо не знайдено	Отримати останній запит солдата
Commander	GET	/api/commander/rotations/get_by_id	200, 404	id	Ротація за вказаним id або помилка 404, якщо не знайдено	Отримати ротацію за id
Commander	GET	/api/commander/rotations/get_last_by_soldier_id	200, 404	soldierId	Остання ротація солдата або помилка 404, якщо не знайдено	Отримати останню ротацію солдата
Commander	POST	/api/commander/rotations/add	201, 400	days, comment, soldierId	Нова ротація або помилка 400, якщо не знайдено	Додати нову ротацію
Soldier	GET	/api/soldier/login	200, 404, 401	userName, userPassword	Авторизація солдата або помилка 404 або 401	Авторизація солдата
Soldier	PUT	/api/soldier/change_password	204, 400	id, userPassword	Зміна паролю солдата або помилка 400, якщо не знайдено	Зміна паролю солдата
Soldier	GET	/api/soldier/get_profile	200, 400	id	Профіль солдата або помилка 400, якщо не знайдено	Отримати профіль солдата
Soldier	GET	/api/soldier/sleeps/get_all_by_day	200, 400	soldierId, day	Сон солдата за вказаний день або помилка 400, якщо не знайдено	Отримати сон солдата за день
Soldier	PUT	/api/soldier/sleeps/edit/quality	204, 400	sleepId, quality	Оновити якість сну або помилка 400, якщо не знайдено	Оновити якість сну солдата
Soldier	GET	/api/soldier/rotations/get_all_by_soldier_id	200, 404	soldierId	Список усіх ротацій солдата або помилка 404, якщо не знайдено	Отримати список усіх ротацій солдата
Soldier	GET	/api/soldier/requests/get_by_id	200, 404	id	Запит за вказаним id або помилка 404, якщо не знайдено	Отримати запит за id
Soldier	POST	/api/soldier/requests/add	201, 400	time, reason, text, soldierId	Новий запит або помилка 400, якщо не знайдено	Додати новий запит
